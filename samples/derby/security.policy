// Grant everyone the following permissions:
// http://docs.oracle.com/javase/7/docs/technotes/guides/security/PolicyFiles.html
grant { 
  // Can use ${grading.base} as the directory containing the grading directories
  permission java.io.FilePermission "${grading.base}${/}TestingInputs${/}*", "read" ;
  permission java.io.FilePermission "${grading.base}${/}TestingInputs${/}BigJavaDB${/}-", "read,write,delete" ;
  permission java.io.FilePermission "${grading.base}${/}TestingInputs${/}derby.log", "read,write,delete" ;

  // See permissions below for derby.jar.
  // permission java.lang.RuntimePermission "createClassLoader";
  // getProtectionDomain is an optional permission needed for printing
  // classpath information to derby.log.
  // permission java.lang.RuntimePermission "getProtectionDomain";

  // Permissions borrowed from Apache Tomcat
  permission java.util.PropertyPermission "java.home", "read";
  permission java.util.PropertyPermission "java.naming.*", "read";
  permission java.util.PropertyPermission "javax.sql.*", "read";

  // OS Specific properties to allow read access
  permission java.util.PropertyPermission "os.name", "read";
  permission java.util.PropertyPermission "os.version", "read";
  permission java.util.PropertyPermission "os.arch", "read";
  permission java.util.PropertyPermission "file.separator", "read";
  permission java.util.PropertyPermission "path.separator", "read";
  permission java.util.PropertyPermission "line.separator", "read";

  // JVM properties to allow read access
  permission java.util.PropertyPermission "java.version", "read";
  permission java.util.PropertyPermission "java.vendor", "read";
  permission java.util.PropertyPermission "java.vendor.url", "read";
  permission java.util.PropertyPermission "java.class.version", "read";
  permission java.util.PropertyPermission "java.specification.version", "read";
  permission java.util.PropertyPermission "java.specification.vendor", "read";
  permission java.util.PropertyPermission "java.specification.name", "read";
  permission java.util.PropertyPermission "java.vm.specification.version", "read";
  permission java.util.PropertyPermission "java.vm.specification.vendor", "read";
  permission java.util.PropertyPermission "java.vm.specification.name", "read";
  permission java.util.PropertyPermission "java.vm.version", "read";
  permission java.util.PropertyPermission "java.vm.vendor", "read";
  permission java.util.PropertyPermission "java.vm.name", "read";

  // Allow read of JAXP compliant XML parser debug
  permission java.util.PropertyPermission "jaxp.debug", "read";
};

grant codeBase "file://${grading.base}${/}derby.jar"
{
  // https://db.apache.org/derby/docs/10.11/security/rsecpolicysample.html
  //
  // These permissions are needed for everyday, embedded Derby usage.
  //
  permission java.lang.RuntimePermission "createClassLoader";
  permission java.util.PropertyPermission "derby.*", "read";
  permission java.util.PropertyPermission "user.dir", "read";
  permission java.util.PropertyPermission "derby.storage.jvmInstanceId", 
      "write"; 
  // The next two properties are used to determine if the VM is 32-bit
  // or 64-bit.
  permission java.util.PropertyPermission "sun.arch.data.model", "read";
  permission java.util.PropertyPermission "os.arch", "read";
  permission java.io.FilePermission "${grading.base}${/}TestingInputs${/}BigJavaDB","read";
  permission java.io.FilePermission "${grading.base}${/}TestingInputs${/}BigJavaDB${/}-", 
      "read,write,delete";
  permission java.io.FilePermission "${grading.base}${/}TestingInputs${/}BigJavaDB${/}derby.log", "read,write,delete";

  //
  // This permission lets a DBA reload the policy file while the server
  // is still running. The policy file is reloaded by invoking the
  // SYSCS_UTIL.SYSCS_RELOAD_SECURITY_POLICY() system procedure.
  //
  permission java.security.SecurityPermission "getPolicy";

  // getProtectionDomain is an optional permission needed for printing
  // classpath information to derby.log.
  permission java.lang.RuntimePermission "getProtectionDomain";

  //
  // The following permission must be granted for
  // Connection.abort(Executor) to work. Note that this permission must
  // also be granted to outer (application) code domains.
  //
  permission java.sql.SQLPermission "callAbort";

  // Needed by file permissions restriction system.
  permission java.lang.RuntimePermission "accessUserInformation";
  permission java.lang.RuntimePermission "getFileStoreAttributes";

  // This permission is needed to connect to the LDAP server in order
  // to authenticate users.
  // permission java.net.SocketPermission "127.0.0.1:1389", 
  //    "accept,connect,resolve";
};
